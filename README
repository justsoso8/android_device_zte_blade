put in cm7/device/zte/n780
extract_files to vendor/zte/n780
setup to let it use P020121010542808168083/kernel for both system & recovery

FTM: down+power
REC: up+dial+power

keycode:
102 HOME
135 MENU
158 RETURN
231 DIAL
107 END
115 UP
114 DOWN

N780有512MB的rom，在他的官方rom中，共设置了9个分区，分别为：
RECOVERY: 音量下+开机时系统从这个分区开始启动，和boot分区一样，放的是linux kernel和一个ramdisk
BOOT：平常开机时系统从这个分区开始启动，放的是linux kernel和一个ramdisk，作为系统启动后的根目录
SPLASH：应该只是第一屏开机画面
MISC：不知道，有知道的请说
CACHE: 顾名思义就是cache啦，具体谁用我还真不知道。也不知道推荐的尺寸应该是多少。看了一下，好像里面的东西总是很少，但手机公司给他分配的空间又总是很大。有知道的请说。
SYSTEM：boot会挂载这个分区，其中存放大量的系统应用。root以后用户也可以向里面放自己想要的应用。恢复出厂设置时不会丢掉。
USERDATA：boot会挂载这个分区，存放用户安装的应用和其他一些会变动的设置。恢复出厂设置时就全部清空了。
OEM：顾名思义，猜想是放厂商定制时会放的一些数据，但具体怎么用我还真不知道不知道，有知道的请说
更新：
研究过了，这个目录会挂载为/data/media，供中兴手机在没有TF卡时存储照片，目前分区为21M
相信大家都有TF卡吧，那么这个分区一般都用不着的。
因此，可以将这个分区缩小，剩下的部分分配给userdata
我试过，其它条件不变，保持cache10M，system120M
给该分区分配1M空间时，系统拒绝格式化这个分区，/data/media目录没法挂载到这个分区, 但目录仍然存在，系统肯定不会有问题。这时userdata最大可到310M
给该分区分配5M空间时，系统会格式化这个分区，/data/media挂载到这个分区。这时userdata最大可到306M
分区文件就不提供了。各位自己按需要DIY吧。:-)
PERSIST：顾名思义，猜想是放一些恢复出厂设置时也不会丢掉的数据。但具体哪些应用会用我还真不知道。有知道的请说。
所以呢，只要保证recovery分区不被重写，按音量下+开机应该总能进入recovery分区启动成FTM模式，就总能通过线刷写入官方发布版。手机应该就不会变砖的。
在线刷的过程中，线刷首先利用partition_zte.mbn对rom进行分区，然后把数据写入相应分区。因此分区大小和实际刷入的数据包大小是可以无关的。
一个做好的system.img只有150M，但我可以给system分区分配200M空间。当然给system分区分配100M空间是肯定不够的。
所以，每个同学都可以利用已经存在的刷机包，通过修改分区文件，自己设定想要的分区大小。
实际操作中，我一般是改变cache/system/data三个分区的大小。N780 B05原始的分区文件，cache 37.5M, system 220M, data 162.5M，总和是420M。
我首先装一下我自己做的精简版，看看system到底要多大，实测大约110M，那么，我可以给system分区分配120M。另外，给cache分配10M，就可以算出data空间可以有290M空间了。
用十六进制编辑器打开partition_zte.mbn，经过整理可以看到
0:RECOVERY:00 00 00 00 00 00 CC 01 00 00 28 00 00 00 00 00 00 00  -->1CC 28
0:BOOT:00 00 00 00 00 00 00 00 00 00 F4 01 00 00 28 00 00 00 00 00 00 00  -->1F4 28
0:SPLASH:00 00 00 00 00 00 00 00 1C 02 00 00 0C 00 00 00 00 00 00 00  -->21C 0C
0:MISC: 00 00 00 00 00 00 00 00 00 00 28 02 00 00 04 00 00 00 00 00 00 00  -->228 04
0:CACHE:00 00 00 00 00 00 00 00 00 2C 02 00 00 2C 01 00 00 00 00 00 00  -->22C 12C
0:CACHE:00 00 00 00 00 00 00 00 00 2C 02 00 00 50 00 00 00 00 00 00 00  -->22C 50
0:SYSTEM:00 00 00 00 00 00 00 00 58 03 00 00 E0 06 00 00 00 00 00 00  -->358 6E0
0:SYSTEM:00 00 00 00 00 00 00 00 7c 02 00 00 b0 04 00 00 00 00 00 00  -->27c 4b0
0:SYSTEM:00 00 00 00 00 00 00 00 7c 02 00 00 b0 04 00 00 00 00 00 00  -->27c 3c0
0:USERDATA:00 00 00 00 00 00 38 0A 00 00 14 05 00 00 00 00 00 00  -->A38 514
0:USERDATA:00 00 00 00 00 00 2c 07 00 00 20 08 00 00 00 00 00 00  -->72c 820
0:USERDATA:00 00 00 00 00 00 2c 07 00 00 20 08 00 00 00 00 00 00  -->63c 910
0:OEM:00 00 00 00 00 00 00 00 00 00 00 4C 0F 00 00 A8 00 00 00 00 00 00 00  -->F4C A8
0:PERSIST:00 00 00 00 00 00 00 F4 0F 00 00 0C 00 00 00 00 00 00 00  -->FF4 0C
其中->后面的数字是我做的标注，第一个数字是偏移量，第二个数字是区块数。单位是128K/块。
从中可以看到recovery从1cc开始，共28块，然后boot区从1f4开始，共28块。以此内推。
原来的cache共12C块，我们现在给他分配50块，这样system区就可以从原来的358移到27c开始。以此类推。
以下就是我针对 10/150/260和10/120/290分区方案所做的计算，具体的数字也放到了上面的列表中。
from
12c 6e0 514 （十六进制，区块数）
300 1760 1300  （十进制，区块数）
37.5 220 162.5 M 十进制，MB数
to
10 150  260 M 十进制，MB数
80 1200 2080 （十进制，区块数）
50 4b0 820  （十六进制，区块数）
to
10 120  290 M 十进制，MB数
80 960 2320 （十进制，区块数）
50 3c0  910 （十六进制，区块数）
在appsboot.mbn的最底部也有一个同样的表。只要对appsboot.mbn和partition_zte.mbn进行相应的修改，把修改好的文件替换刷机文件，你就可以得到你想要的内存分配方案了。

顺便说一下，卡刷不会重写分区表，所以如果你做好一个分区分配，用卡刷是不会改变分区大小的。但一个风险是，如果你的分区比卡刷的分区小，比如你的system分区是120M， 但B05官方版system分区大约150M，那么卡刷后有什么后果应该是没人能预计的。但我猜想它应该没有破坏recovery分区，所以进入FTM重新线刷应该是没问题的，所以应该是不会变砖的。
